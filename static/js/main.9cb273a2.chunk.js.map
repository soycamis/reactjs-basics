{"version":3,"sources":["pages/Index.js","components/Badge.js","components/BadgeForm.js","pages/BadgeNew.js","components/BadgesList.js","pages/Badges.js","serviceWorker.js","index.js"],"names":["Index","className","to","Badge","role","aria-label","src","this","props","avatarUrl","alt","firstName","lastName","jobTitle","socialTwitter","React","Component","BadgeForm","name","htmlFor","onChange","myOnChange","type","id","value","BadgeNew","state","form","handleChange","evt","inputName","target","inputValue","setState","BadgeList","dataList","map","item","key","Badges","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qUAeeA,MAVf,WACE,OACE,6BAASC,UAAU,oBACjB,kBAAC,IAAD,CAAMC,GAAG,WAAWD,UAAU,eAA9B,Y,4CCgCSE,G,6KAlCX,OACE,6BAASF,UAAU,SACjB,4BAAQA,UAAU,iBAChB,0BAAMG,KAAK,MAAMC,aAAW,QAA5B,iBAIF,0BAAMJ,UAAU,eACd,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,sBACb,yBAAKK,IAAKC,KAAKC,MAAMC,UAAWC,IAAI,YAEtC,yBAAKT,UAAU,oBACZM,KAAKC,MAAMG,UADd,IAC0BJ,KAAKC,MAAMI,WAGvC,yBAAKX,UAAU,2BACb,2BAAIM,KAAKC,MAAMK,UACf,+BACIN,KAAKC,MAAMM,cACb,0BAAMV,KAAK,MAAMC,aAAW,aAA5B,qCAMN,4BAAQJ,UAAU,iBAChB,oD,GA7BUc,IAAMC,YC2DXC,G,6KAzDX,OACE,6BAAShB,UAAU,wBACjB,0CACA,0BAAMiB,KAAK,YACT,6BACE,2BAAOC,QAAQ,QAAf,SACA,6BACA,2BACEC,SAAUb,KAAKC,MAAMa,WACrBC,KAAK,OACLJ,KAAK,YACLK,GAAG,eAIP,6BACE,2BAAOJ,QAAQ,YAAf,cACA,6BACA,2BACEC,SAAUb,KAAKC,MAAMa,WACrBC,KAAK,OACLJ,KAAK,WACLK,GAAG,cAIP,6BACE,2BAAOJ,QAAQ,YAAf,cACA,6BACA,2BACEC,SAAUb,KAAKC,MAAMa,WACrBC,KAAK,OACLJ,KAAK,WACLK,GAAG,cAIP,6BACE,2BAAOJ,QAAQ,YAAf,YACA,6BACA,2BACEC,SAAUb,KAAKC,MAAMa,WACrBC,KAAK,OACLJ,KAAK,gBACLK,GAAG,mBAIP,6BACE,2BAAOtB,UAAU,cAAcqB,KAAK,SAASE,MAAM,gB,GAnDvCT,IAAMC,YC0CfS,E,4MAzCbC,MAAQ,CACNC,KAAM,CACJhB,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,cAAe,K,EAInBc,aAAe,SAACC,GACd,IAAIC,EAAYD,EAAIE,OAAOb,KACvBc,EAAaH,EAAIE,OAAOP,MAE5B,EAAKS,SAAS,CACZN,KAAK,2BACA,EAAKD,MAAMC,MADZ,kBAEDG,EAAYE,O,uDAMjB,OACE,6BAAS/B,UAAU,sBACjB,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CACEU,UAAWJ,KAAKmB,MAAMC,KAAKhB,UAC3BC,SAAUL,KAAKmB,MAAMC,KAAKf,SAC1BH,UAAU,2KACVI,SAAUN,KAAKmB,MAAMC,KAAKd,SAC1BC,cAAeP,KAAKmB,MAAMC,KAAKb,iBAGnC,yBAAKb,UAAU,iBACb,kBAAC,EAAD,CAAWoB,WAAYd,KAAKqB,qB,GAnCfb,IAAMC,WCqBdkB,E,uKApBX,OACE,oCACG3B,KAAKC,MAAM2B,SAASC,KAAI,SAACC,GACxB,OACE,yBAAKpC,UAAU,kBAAkBqC,IAAKD,EAAKd,IACzC,kBAAC,EAAD,CACEZ,UAAW0B,EAAK1B,UAChBC,SAAUyB,EAAKzB,SACfH,UAAW4B,EAAK5B,UAChBI,SAAUwB,EAAKxB,SACfC,cAAeuB,EAAKvB,yB,GAZZC,IAAMC,WC6CfuB,G,kNAxCbb,MAAQ,CACNc,KAAM,CACJ,CACEjB,GAAI,EACJZ,UAAW,SACXC,SAAU,OACVH,UACE,2KACFI,SAAU,kBACVC,cAAe,eAEjB,CACES,GAAI,EACJZ,UAAW,QACXC,SAAU,MACVH,UACE,2KACFI,SAAU,cACVC,cAAe,a,uDAKnB,OACE,6BAASb,UAAU,yBACjB,4CACA,6BACA,6BACE,kBAAC,IAAD,CAAMA,UAAU,cAAcC,GAAG,eAAjC,kBAIF,yBAAKD,UAAU,oBACb,kBAAC,EAAD,CAAWkC,SAAU5B,KAAKmB,MAAMc,a,GAlCrBzB,IAAMC,Y,MCKPyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnD,IACjC,kBAAC,IAAD,CAAOiD,OAAK,EAACC,KAAK,UAAUC,UAAWZ,IACvC,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,cAAcC,UAAW1B,OAIjD2B,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9cb273a2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./styles/Index.css\";\r\n\r\nfunction Index() {\r\n  return (\r\n    <section className=\"Index__container\">\r\n      <Link to=\"/badges/\" className=\"Index__Link\">\r\n        Badges\r\n      </Link>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Index;\r\n","import React from \"react\";\r\n\r\nimport \"./styles/Badge.css\";\r\n\r\nclass Badge extends React.Component {\r\n  render() {\r\n    return (\r\n      <section className=\"Badge\">\r\n        <header className=\"Badge__header\">\r\n          <span role=\"img\" aria-label=\"Tech\">\r\n            üëæ\r\n          </span>\r\n        </header>\r\n        <main className=\"Badge__info\">\r\n          <div className=\"Badge__info-container\">\r\n            <div className=\"Badge__info-avatar\">\r\n              <img src={this.props.avatarUrl} alt=\"Avatar\" />\r\n            </div>\r\n            <div className=\"Badge__info-name\">\r\n              {this.props.firstName} {this.props.lastName}\r\n            </div>\r\n          </div>\r\n          <div className=\"Badge__info-description\">\r\n            <p>{this.props.jobTitle}</p>\r\n            <p>\r\n              @{this.props.socialTwitter}\r\n              <span role=\"img\" aria-label=\"Cat Ninja\">\r\n                üê±‚Äçüë§\r\n              </span>\r\n            </p>\r\n          </div>\r\n        </main>\r\n        <footer className=\"Badge__footer\">\r\n          <p>#reactjs ‚ù§</p>\r\n        </footer>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Badge;\r\n","import React from \"react\";\r\n\r\nimport \"./styles/BadgeForm.css\";\r\n\r\nclass BadgeForm extends React.Component {\r\n  render() {\r\n    return (\r\n      <section className=\"BadgeForm__container\">\r\n        <h1>New Badge!</h1>\r\n        <form name=\"newBadge\">\r\n          <div>\r\n            <label htmlFor=\"name\">Name:</label>\r\n            <br />\r\n            <input\r\n              onChange={this.props.myOnChange}\r\n              type=\"text\"\r\n              name=\"firstName\"\r\n              id=\"firstName\"\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"lastName\">Last Name:</label>\r\n            <br />\r\n            <input\r\n              onChange={this.props.myOnChange}\r\n              type=\"text\"\r\n              name=\"lastName\"\r\n              id=\"lastName\"\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"lastName\">Job Title:</label>\r\n            <br />\r\n            <input\r\n              onChange={this.props.myOnChange}\r\n              type=\"text\"\r\n              name=\"jobTitle\"\r\n              id=\"jobTitle\"\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"lastName\">Twitter:</label>\r\n            <br />\r\n            <input\r\n              onChange={this.props.myOnChange}\r\n              type=\"text\"\r\n              name=\"socialTwitter\"\r\n              id=\"socialTwitter\"\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <input className=\"Index__Link\" type=\"submit\" value=\"Save\" />\r\n          </div>\r\n        </form>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BadgeForm;\r\n","import React from \"react\";\r\nimport Badge from \"../components/Badge\";\r\nimport BadgeForm from \"../components/BadgeForm\";\r\n\r\nclass BadgeNew extends React.Component {\r\n  state = {\r\n    form: {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      jobTitle: \"\",\r\n      socialTwitter: \"\",\r\n    },\r\n  };\r\n\r\n  handleChange = (evt) => {\r\n    let inputName = evt.target.name;\r\n    let inputValue = evt.target.value;\r\n\r\n    this.setState({\r\n      form: {\r\n        ...this.state.form,\r\n        [inputName]: inputValue,\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"PageNew__container\">\r\n        <div className=\"PageNew__badge\">\r\n          <Badge\r\n            firstName={this.state.form.firstName}\r\n            lastName={this.state.form.lastName}\r\n            avatarUrl=\"https://previews.123rf.com/images/vikatomas/vikatomas1902/vikatomas190200060/120808953-japan-red-sun-cat-ninja-illustration-vector-a-cat-with-a-bandage-martial-arts.jpg\"\r\n            jobTitle={this.state.form.jobTitle}\r\n            socialTwitter={this.state.form.socialTwitter}\r\n          />\r\n        </div>\r\n        <div className=\"PageNew__form\">\r\n          <BadgeForm myOnChange={this.handleChange} />\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BadgeNew;\r\n","import React from \"react\";\r\nimport Badge from \"./Badge\";\r\n\r\nclass BadgeList extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.props.dataList.map((item) => {\r\n          return (\r\n            <div className=\"BadgeList__item\" key={item.id}>\r\n              <Badge\r\n                firstName={item.firstName}\r\n                lastName={item.lastName}\r\n                avatarUrl={item.avatarUrl}\r\n                jobTitle={item.jobTitle}\r\n                socialTwitter={item.socialTwitter}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BadgeList;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport BadgeList from \"../components/BadgesList\";\r\n\r\nimport \"./styles/Badges.css\";\r\n\r\nclass Badges extends React.Component {\r\n  state = {\r\n    data: [\r\n      {\r\n        id: 1,\r\n        firstName: \"Camilo\",\r\n        lastName: \"Sosa\",\r\n        avatarUrl:\r\n          \"https://previews.123rf.com/images/vikatomas/vikatomas1902/vikatomas190200060/120808953-japan-red-sun-cat-ninja-illustration-vector-a-cat-with-a-bandage-martial-arts.jpg\",\r\n        jobTitle: \"Developer Ninja\",\r\n        socialTwitter: \"camiilososa\",\r\n      },\r\n      {\r\n        id: 2,\r\n        firstName: \"c0dex\",\r\n        lastName: \"Dev\",\r\n        avatarUrl:\r\n          \"https://previews.123rf.com/images/vikatomas/vikatomas1902/vikatomas190200060/120808953-japan-red-sun-cat-ninja-illustration-vector-a-cat-with-a-bandage-martial-arts.jpg\",\r\n        jobTitle: \"Samurai Dev\",\r\n        socialTwitter: \"c0dex__\",\r\n      },\r\n    ],\r\n  };\r\n  render() {\r\n    return (\r\n      <section className=\"BadgesList__container\">\r\n        <h1>Badges List!</h1>\r\n        <hr />\r\n        <div>\r\n          <Link className=\"Index__Link\" to=\"/badges/new\">\r\n            Agregar nuevo\r\n          </Link>\r\n        </div>\r\n        <div className=\"BadgeList__items\">\r\n          <BadgeList dataList={this.state.data} />\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Badges;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Index from \"./pages/Index\";\nimport BadgeNew from \"./pages/BadgeNew\";\nimport Badges from \"./pages/Badges\";\n\nimport \"./index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Index} />\n        <Route exact path=\"/badges\" component={Badges} />\n        <Route exact path=\"/badges/new\" component={BadgeNew} />\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}